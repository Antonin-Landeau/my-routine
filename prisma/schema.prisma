// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts          Account[]
  sessions          Session[]
  createdRoutines   Routine[]
  participations    Participation[]
  score             Score[]
  RecivedInvitation Invitation[]    @relation("RecivedInvitation")
  SendInvitation    Invitation[]    @relation("SendedInvitation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Routine {
  id          String  @id @default(cuid())
  title       String
  description String
  mainImg     String
  isPublic    Boolean

  tasks Task[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  participants Participation[]
  score        Score[]
  Invitation   Invitation[]

  @@index([authorId])
}

model Participation {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId String

  @@id([userId, routineId])
  @@index([userId])
  @@index([routineId])
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String
  points      Int
  routine     Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId   String
  score       Score[]

  @@index([routineId])
}

model Score {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  task      Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String?
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId String

  createdAt String

  @@index([userId])
  @@index([taskId])
  @@index([routineId])
}

model Notification {
  id          String       @id @default(cuid())
  invitations Invitation[]
}

model Invitation {
  id        String @id @default(cuid())
  from      User   @relation("RecivedInvitation", fields: [senderId], references: [id])
  senderId  String
  to        User   @relation("SendedInvitation", fields: [reciverId], references: [id])
  reciverId String

  routine   Routine @relation(fields: [routineId], references: [id])
  status    String
  routineId String

  Notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?

  @@index([senderId])
  @@index([reciverId])
  @@index([routineId])
  @@index([notificationId])
}
